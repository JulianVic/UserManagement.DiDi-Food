{
  "info": {
    "name": "User Management API - Sistema SOA",
    "description": "API completa para gesti√≥n de usuarios con arquitectura hexagonal. Incluye operaciones CRUD, gesti√≥n de direcciones y validaciones robustas.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "üè† Sistema",
      "description": "Endpoints para verificar el estado del sistema",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Verifica que la API est√© funcionando correctamente"
          },
          "response": [
            {
              "name": "Respuesta exitosa",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/",
                  "host": ["{{baseUrl}}"],
                  "path": [""]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [],
              "cookie": [],
              "body": "Hello World!"
            }
          ]
        }
      ]
    },
    {
      "name": "üë§ Gesti√≥n de Usuarios",
      "description": "Operaciones CRUD para usuarios del sistema",
      "item": [
        {
          "name": "üìã Listar Todos los Usuarios",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Data is an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success) {",
                  "        pm.expect(responseJson.data).to.be.an('array');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/all",
              "host": ["{{baseUrl}}"],
              "path": ["user", "all"]
            },
            "description": "Obtiene la lista completa de usuarios registrados en el sistema. Retorna un array con todos los usuarios activos."
          }
        },
        {
          "name": "‚ûï Crear Usuario Cliente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Usuario creado exitosamente', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(201);",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    ",
                  "    if (responseJson.success && responseJson.data) {",
                  "        pm.environment.set('userId', responseJson.data.id);",
                  "        pm.environment.set('userEmail', responseJson.data.contact.email);",
                  "    }",
                  "});",
                  "",
                  "pm.test('User has all required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data) {",
                  "        const user = responseJson.data;",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('name');",
                  "        pm.expect(user).to.have.property('contact');",
                  "        pm.expect(user).to.have.property('role');",
                  "        pm.expect(user.role).to.equal('cliente');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Juan Carlos\",\n  \"lastName\": \"P√©rez Garc√≠a\",\n  \"contact\": {\n    \"email\": \"juan.perez@ejemplo.com\",\n    \"phone\": \"9612345678\"\n  },\n  \"password\": \"MiPassword123@\",\n  \"role\": \"cliente\",\n  \"addresses\": [\n    {\n      \"street\": \"Av. Central\",\n      \"number\": \"123\",\n      \"neighborhood\": \"Centro\",\n      \"city\": \"Tuxtla Guti√©rrez\",\n      \"state\": \"Chiapas\",\n      \"zipCode\": \"29000\",\n      \"country\": \"M√©xico\",\n      \"additionalInfo\": \"Casa azul con port√≥n blanco\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": ["{{baseUrl}}"],
              "path": ["user"]
            },
            "description": "Crea un nuevo usuario cliente. Requiere datos de contacto v√°lidos, contrase√±a segura y opcionalmente direcciones.\n\n**Validaciones:**\n- Email: formato v√°lido\n- Tel√©fono: 10 d√≠gitos mexicanos\n- Contrase√±a: min 8 chars, may√∫scula, min√∫scula, n√∫mero, car√°cter especial\n- Rol: 'cliente'"
          }
        },
        {
          "name": "üöö Crear Usuario Repartidor",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Mar√≠a Elena\",\n  \"lastName\": \"Gonz√°lez L√≥pez\",\n  \"contact\": {\n    \"email\": \"maria.delivery@ejemplo.com\",\n    \"phone\": \"9619876543\"\n  },\n  \"password\": \"DeliveryPass456!\",\n  \"role\": \"repartidor\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": ["{{baseUrl}}"],
              "path": ["user"]
            },
            "description": "Crea un nuevo usuario repartidor. Los repartidores pueden gestionar entregas en el sistema."
          }
        },
        {
          "name": "üçΩÔ∏è Crear Usuario Restaurante",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Restaurante Los Sabores de Chiapas\",\n  \"contact\": {\n    \"email\": \"info@lossaboreschis.com\",\n    \"phone\": \"9615551234\"\n  },\n  \"password\": \"RestaurantPass789$\",\n  \"role\": \"restaurante\",\n  \"addresses\": [\n    {\n      \"street\": \"Blvd. Belisario Dom√≠nguez\",\n      \"number\": \"789\",\n      \"neighborhood\": \"Las Granjas\",\n      \"city\": \"Tuxtla Guti√©rrez\",\n      \"state\": \"Chiapas\",\n      \"zipCode\": \"29020\",\n      \"country\": \"M√©xico\",\n      \"additionalInfo\": \"Local comercial en planta baja, esquina\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": ["{{baseUrl}}"],
              "path": ["user"]
            },
            "description": "Crea un nuevo usuario restaurante. Los restaurantes pueden gestionar sus men√∫s y √≥rdenes."
          }
        },
        {
          "name": "üîç Obtener Usuario por ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Usuario encontrado por ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (pm.response.code === 200) {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data).to.have.property('id');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "{{userId}}"]
            },
            "description": "Obtiene un usuario espec√≠fico por su ID √∫nico. Retorna todos los detalles del usuario incluyendo contacto y direcciones."
          }
        },
        {
          "name": "üìß Obtener Usuario por Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Usuario encontrado por email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (pm.response.code === 200) {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data.contact.email).to.include(pm.environment.get('userEmail'));",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user?email={{userEmail}}",
              "host": ["{{baseUrl}}"],
              "path": ["user"],
              "query": [
                {
                  "key": "email",
                  "value": "{{userEmail}}",
                  "description": "Email del usuario a buscar"
                }
              ]
            },
            "description": "Busca un usuario por su direcci√≥n de email. √ötil para validaciones de login o verificaci√≥n de usuarios existentes."
          }
        },
        {
          "name": "‚úÖ Verificar si Usuario Existe",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/{{userId}}/exists",
              "host": ["{{baseUrl}}"],
              "path": ["user", "{{userId}}", "exists"]
            },
            "description": "Verifica si un usuario existe en el sistema por su ID. Retorna true/false sin exponer datos sensibles."
          }
        },
        {
          "name": "üì¨ Verificar si Email Existe",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/email/{{userEmail}}/exists",
              "host": ["{{baseUrl}}"],
              "path": ["user", "email", "{{userEmail}}", "exists"]
            },
            "description": "Verifica si un email ya est√° registrado en el sistema. √ötil para validaciones antes de registro."
          }
        },
        {
          "name": "üóëÔ∏è Eliminar Usuario",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Usuario eliminado exitosamente', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('eliminado');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "{{userId}}"]
            },
            "description": "Elimina (desactiva) un usuario del sistema. Los usuarios eliminados mantienen sus datos pero quedan inactivos."
          }
        }
      ]
    },
    {
      "name": "üè† Gesti√≥n de Direcciones",
      "description": "Operaciones para gestionar direcciones de usuarios",
      "item": [
        {
          "name": "‚ûï Agregar Direcci√≥n a Usuario",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Direcci√≥n agregada exitosamente', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(201);",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('Direcci√≥n agregada');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"street\": \"Calle Secundaria\",\n  \"number\": \"456\",\n  \"neighborhood\": \"El Retiro\",\n  \"city\": \"Tuxtla Guti√©rrez\",\n  \"state\": \"Chiapas\",\n  \"zipCode\": \"29050\",\n  \"country\": \"M√©xico\",\n  \"additionalInfo\": \"Departamento 3B, segundo piso, edificio amarillo\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user/{{userId}}/addresses",
              "host": ["{{baseUrl}}"],
              "path": ["user", "{{userId}}", "addresses"]
            },
            "description": "Agrega una nueva direcci√≥n a un usuario existente. Los usuarios pueden tener m√°ximo 5 direcciones."
          }
        },
        {
          "name": "‚ûñ Eliminar Direcci√≥n de Usuario",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"street\": \"Calle Secundaria\",\n  \"number\": \"456\",\n  \"neighborhood\": \"El Retiro\",\n  \"city\": \"Tuxtla Guti√©rrez\",\n  \"state\": \"Chiapas\",\n  \"zipCode\": \"29050\",\n  \"country\": \"M√©xico\",\n  \"additionalInfo\": \"Departamento 3B, segundo piso, edificio amarillo\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user/{{userId}}/addresses",
              "host": ["{{baseUrl}}"],
              "path": ["user", "{{userId}}", "addresses"]
            },
            "description": "Elimina una direcci√≥n espec√≠fica de un usuario. Debe coincidir exactamente con los datos de la direcci√≥n existente."
          }
        }
      ]
    },
    {
      "name": "üß™ Casos de Prueba",
      "description": "Flujos de prueba y validaciones",
      "item": [
        {
          "name": "‚ùå Error: Tel√©fono Inv√°lido",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Error\",\n  \"contact\": {\n    \"email\": \"test@test.com\",\n    \"phone\": \"123\"\n  },\n  \"password\": \"Password123@\",\n  \"role\": \"cliente\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": ["{{baseUrl}}"],
              "path": ["user"]
            },
            "description": "Prueba que falla: tel√©fono con formato inv√°lido. Debe retornar error de validaci√≥n."
          }
        },
        {
          "name": "‚ùå Error: Email Duplicado",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Usuario Duplicado\",\n  \"contact\": {\n    \"email\": \"{{userEmail}}\",\n    \"phone\": \"9612345678\"\n  },\n  \"password\": \"Password123@\",\n  \"role\": \"cliente\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": ["{{baseUrl}}"],
              "path": ["user"]
            },
            "description": "Prueba que falla: intenta crear usuario con email ya existente."
          }
        },
        {
          "name": "‚ùå Error: Contrase√±a D√©bil",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Contrase√±a\",\n  \"contact\": {\n    \"email\": \"test.password@test.com\",\n    \"phone\": \"9612345678\"\n  },\n  \"password\": \"123\",\n  \"role\": \"cliente\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": ["{{baseUrl}}"],
              "path": ["user"]
            },
            "description": "Prueba que falla: contrase√±a que no cumple requisitos de seguridad."
          }
        },
        {
          "name": "‚ùå Error: Usuario Eliminado - Consultar",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Necesitas un userId de un usuario eliminado",
                  "// Primero elimina un usuario y guarda su ID"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/{{deletedUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user", "{{deletedUserId}}"]
            },
            "description": "Prueba que falla: intenta obtener un usuario que fue eliminado. Debe retornar error indicando que el usuario no est√° disponible."
          }
        },
        {
          "name": "‚ùå Error: Usuario Eliminado - Agregar Direcci√≥n",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"street\": \"Calle Test\",\n  \"number\": \"123\",\n  \"neighborhood\": \"Test\",\n  \"city\": \"Test City\",\n  \"state\": \"Test State\",\n  \"zipCode\": \"12345\",\n  \"country\": \"M√©xico\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user/{{deletedUserId}}/addresses",
              "host": ["{{baseUrl}}"],
              "path": ["user", "{{deletedUserId}}", "addresses"]
            },
            "description": "Prueba que falla: intenta agregar direcci√≥n a usuario eliminado."
          }
        },
        {
          "name": "‚úÖ Flujo: Crear, Eliminar, Intentar Reutilizar Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Este test verifica que se puede reutilizar email de usuario eliminado",
                  "pm.test('Permite reutilizar email de usuario eliminado', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (pm.response.code === 201) {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Usuario Reutilizado\",\n  \"lastName\": \"Test\",\n  \"contact\": {\n    \"email\": \"reutilizar@test.com\",\n    \"phone\": \"9612345678\"\n  },\n  \"password\": \"NewPassword123@\",\n  \"role\": \"cliente\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/user",
              "host": ["{{baseUrl}}"],
              "path": ["user"]
            },
            "description": "Crea usuario con email que anteriormente perteneci√≥ a usuario eliminado. Debe funcionar correctamente."
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global que se ejecuta antes de cada request",
          "console.log('Ejecutando request a:', pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global que se ejecuta despu√©s de cada request",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has valid JSON structure', function () {",
          "    try {",
          "        const response = pm.response.json();",
          "        pm.expect(response).to.be.an('object');",
          "    } catch (e) {",
          "        // Si no es JSON, verificar que sea text/html (health check)",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('text');",
          "    }",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "description": "URL base del servidor de desarrollo"
    },
    {
      "key": "userId",
      "value": "",
      "description": "ID del √∫ltimo usuario creado (se actualiza autom√°ticamente)"
    },
    {
      "key": "userEmail",
      "value": "juan.perez@ejemplo.com",
      "description": "Email del usuario para pruebas"
    },
    {
      "key": "deletedUserId",
      "value": "",
      "description": "ID de un usuario eliminado para pruebas de validaci√≥n"
    }
  ]
} 